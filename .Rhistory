activityData <- read.csv("activity.csv")
unzip("activity.zip")
unzip("activity.zip")
activityData <- read.csv("activity.csv")
summary(activityData)
head(activityData)
ls(activityData)
str(activityData)
tail(activityData)
colmax(activityData)
sapply(activityData, max, na.rm = TRUE)
sapply(activityData$interval, max, na.rm = TRUE)
max(activityData$interval)
unzip("activity.zip")
rawActivityData <- read.csv("activity.csv")
activityData <- aggregate(steps~date, data = rawActivityData, sum, na.rm = TRUE)
str(activityData)
summary(activityData)
head(activityData)
#make a comment
```{r}
# Keep only relevant data, remove NA values
stepsData <- aggregate(steps~date, data = activityData, sum, na.rm = TRUE)
# find mean
mean(stepsData$steps)
#find median
median(stepsData$steps)
```
sum(stepsData$steps)
stepsData
hist(stepsData)
hist(stepsData$steps)
?hist
str(activityData)
# Chunk 1
unzip("activity.zip")
activityData <- read.csv("activity.csv")
# Chunk 2
# Keep only relevant data, group by date, remove NA values
stepsData <- aggregate(steps~date, data = activityData, sum, na.rm = TRUE)
# find mean
mean(stepsData$steps)
#find median
median(stepsData$steps)
# Keep only relevant data, group by date, remove NA values
intervalsData <- aggregate(steps~interval, data = activityData, sum, na.rm = TRUE)
str(intervalsData)
intervalsData
# Keep only relevant data, group by date, remove NA values
intervalsData <- aggregate(steps~interval, data = activityData, FUN =mean(), na.rm = TRUE)
# Keep only relevant data, group by date, remove NA values
intervalsData <- aggregate(steps~interval, data = activityData, FUN =mean, na.rm = TRUE)
intervalsData
?aggregate
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
## Loading and preprocessing the data
The data comes in a single csv file after unzipping, which is easy to read.
```{r}
unzip("activity.zip")
activityData <- read.csv("activity.csv")
```
In prepration for imputing the data at a later stage, I will leave the data unprocessed and simply process it before each requirement.
## What is mean total number of steps taken per day?
Calculate the mean and median.
```{r}
# Keep only relevant data, group by date, remove NA values
stepsData <- aggregate(steps~date, data = activityData, sum, na.rm = TRUE)
# find mean
mean(stepsData$steps)
#find median
median(stepsData$steps)
```
We find that the mean is equal to approximately <strong>`r as.integer(mean(stepsData$steps))`</strong>, and the median is equal to <strong>`r median(stepsData$steps)`</strong>. We will create a histogram to display this data visually.
```{r}
hist(stepsData$steps, main = paste("Histogram of Total Steps Taken"))
```
## What is the average daily activity pattern?
In order to calculate this, we will transform the data once more, but this time replacing date with intervals, and using mean instead of sum in order to get the average across all days.
```{r}
# Keep only relevant data, group by date, remove NA values
intervalsData <- aggregate(steps~interval, data = activityData, mean, na.rm = TRUE)
# find mean
mean(stepsData$steps)
#find median
median(stepsData$steps)
```
## Imputing missing values
## Are there differences in activity patterns between weekdays and weekends?
# Keep only relevant data, group by date, remove NA values
intervalsData <- aggregate(steps~interval, data = activityData, mean, na.rm = TRUE)
# creating a time series plot
plot(steps ~ interval, data = intervalsData, type = "1")
# Keep only relevant data, group by date, remove NA values
intervalsData <- aggregate(steps~interval, data = activityData, mean, na.rm = TRUE)
# creating a time series plot
plot(steps ~ interval, data = intervalsData, type = "l")
?plot
intervalsData[intervalsData$interval = 835, ]
intervalsData$interval[[835]]
intervalsData$interval[835]
intervalsData
intervalsData$interval["835]
which(intervalsData$interval = 835)
which(intervalsData$interval == 835)
intervalsData
which.max(intervalsData$steps)
!complete.cases(activityData)
sum(complete.cases(activityData))
sum(!complete.cases(activityData))
summary(activityData)
str(activityData)
dim(activityData)
sum(activityData)
library(mice)
install.packages("mice")
library(mice)
md.pattern(activityData)
tempData <- mice(activityData, m=5, maxit = 50, meth="pmm", seed = 500)
summary(tempData)
?mice
tempData <- mice(activityData, m=5, maxit = 10)
tempData <- mice(activityData, m=3, maxit = 10, printflag = TRUE)
str(tempData)
newData <- complete(activityData, "long",include= TRUE)
newData <- complete(tempData, "long",include= TRUE)
str(newData)
summary(tempData)
tempdata$imp$steps
tempData$imp$steps
head(tempData$imp$steps)
completedData <- complete(tempData,1)
summary(completedData)
# Keep only relevant data, group by date, remove NA values
stepsData <- aggregate(steps~date, data = completedData, sum, na.rm = TRUE)
# find mean
mean(stepsData$steps)
#find median
median(stepsData$steps)
tempData <- mice(activityData, m=5, maxit = 10, printflag = TRUE)
completedData <- complete(tempData,1)
summary(completedData)
library(timedate)
install.packages("timedate")
library(timeDate)
install.packages("timeDate")
)
library(timeDate)
library(chron)
completedData$Weekend = chron::is.weekend(completedData$date)
summary(completedData)
completedData$Weekend <- as.character(completedData$Weekend)
summary(completedData)
completedData$Weekend[completedData$Weekend == "TRUE"] <- "Weekend"
completedData$Weekend[completedData$Weekend == "FALSE"] <- "Weekday"
head(completedData)
names(completedData$Weekend) <- Category
# Chunk 1: setup
knitr::opts_chunk$set(cache=TRUE)
# Chunk 2
unzip("activity.zip")
activityData <- read.csv("activity.csv")
# Chunk 3
# Keep only relevant data, group by date, remove NA values
stepsData <- aggregate(steps~date, data = activityData, sum, na.rm = TRUE)
# find mean
mean(stepsData$steps)
#find median
median(stepsData$steps)
# Chunk 4
hist(stepsData$steps, main = paste("Histogram of Total Steps Taken"))
# Chunk 5
# Keep only relevant data, group by date, remove NA values
intervalsData <- aggregate(steps~interval, data = activityData, mean, na.rm = TRUE)
# creating a time series plot
plot(steps ~ interval, data = intervalsData, type = "l", main = "5-Minute Interval Average Steps")
# Chunk 6
maxInterval <- intervalsData$interval[which.max(intervalsData$steps)]
maxValue <- intervalsData$steps[which.max(intervalsData$steps)]
# Chunk 7
sum(!complete.cases(activityData))
# Chunk 8
library(mice)
#View the pattern of the missing data
md.pattern(activityData)
# Chunk 9
tempData <- mice(activityData, m=5, maxit = 10, printflag = TRUE)
completedData <- complete(tempData,1)
# Chunk 10
# Keep only relevant data, group by date, remove NA values
stepsData <- aggregate(steps~date, data = completedData, sum, na.rm = TRUE)
# find mean
mean(stepsData$steps)
#find median
median(stepsData$steps)
hist(stepsData$steps, main = paste("Histogram of Total Steps Taken (After Imputation)"))
library(chron)
completedData$Week = chron::is.weekend(completedData$date)
completedData$Week <- as.character(completedData$Week)
completedData$Week[completedData$Week == "TRUE"] <- "Weekend"
completedData$Week[completedData$Week == "FALSE"] <- "Weekday"
completedData$Week <- as.factor(completedData$Week)
completedData$Weekend[completedData$Weekend == "TRUE"] <- "Weekend"
summary(completedData)
library(lattice)
tryData <- aggregate(steps ~ interval + Week, completedData, mean)
xyplot(steps ~ Interval | factor(week), data = tryData, aspect = 1/2, type = "l")
xyplot(steps ~ Interval | factor(Week), data = tryData, aspect = 1/2, type = "l")
xyplot(steps ~ interval | factor(Week), data = tryData, aspect = 1/2, type = "l")
xyplot(steps ~ interval | factor(Week), data = WeekData, aspect = 1/2, type = "l")
completedData$Week <- as.factor(completedData$Week)
